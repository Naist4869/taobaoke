// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathTBKPing = "/demo.service.v1.TBK/Ping"
var PathTBKTitleConvertTBKey = "/demo.service.v1.TBK/TitleConvertTBKey"
var PathTBKKeyConvertKey = "/demo.service.v1.TBK/KeyConvertKey"

// TBKBMServer is the server API for TBK service.
type TBKBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	//  rpc SayHello(HelloReq) returns (.google.protobuf.Empty);
	//  rpc SayHelloURL(HelloReq) returns (HelloResp) {
	//    option (google.api.http) = {
	//      get: "/kratos-demo/say_hello"
	//    };
	//  };
	TitleConvertTBKey(ctx context.Context, req *TitleConvertTBKeyReq) (resp *TitleConvertTBKeyResp, err error)

	KeyConvertKey(ctx context.Context, req *KeyConvertKeyReq) (resp *KeyConvertKeyResp, err error)
}

var TBKSvc TBKBMServer

func tBKPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TBKSvc.Ping(c, p)
	c.JSON(resp, err)
}

func tBKTitleConvertTBKey(c *bm.Context) {
	p := new(TitleConvertTBKeyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TBKSvc.TitleConvertTBKey(c, p)
	c.JSON(resp, err)
}

func tBKKeyConvertKey(c *bm.Context) {
	p := new(KeyConvertKeyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TBKSvc.KeyConvertKey(c, p)
	c.JSON(resp, err)
}

// RegisterTBKBMServer Register the blademaster route
func RegisterTBKBMServer(e *bm.Engine, server TBKBMServer) {
	TBKSvc = server
	e.GET("/demo.service.v1.TBK/Ping", tBKPing)
	e.GET("/demo.service.v1.TBK/TitleConvertTBKey", tBKTitleConvertTBKey)
	e.GET("/demo.service.v1.TBK/KeyConvertKey", tBKKeyConvertKey)
}
